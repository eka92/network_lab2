# 6) Реализовать службы Daytime и Time, как ориентированные, так и не ориентированные на соединение. 

# Daytime-сервер, ориентированный на соединение прослушивает порт 13. Как только появляется запрос на соединение, сервер принимает запрос и тут же отсылает строку, содержащую информацию о текущем времени и дате. После этого сервер закрывает соединение (все пришедшие во время соединения данные от клиента игнорируются).
# Daytime-сервер, не ориентированный на соединение ждет датаграмму на порту 13. Как только появляется сообщение (вся данные в сообщении игнорируются), сервер тут же отсылает строку, содержащую информацию о текущем времени и дате.
# Примечание: Стандарт (RFC 867) не устанавливает спецификацию формата возвращаемой строки, но рекомендует чтобы она состояла из печатных ASCII-символов и заканчивалась комбинацией CrLf. Пример строки: “Tuesday, February 22, 1982 17:37:43-PST”.

# Реализовать службу Time (официальный номер порта 37), как ориентированную, так и не ориентированную на соединение.
# Сервер времени, ориентированный на соединение, прослушивает порт 37 на наличие запросов на соединение. При появлении запроса сервер принимает его (все приходящие от клиента данные игнорируются), и тут же отсылает 32-битовое число, представляющее текущее значение времени. После отсылки сервер закрывает соединение.
# Сервер времени, не ориентированный на соединение, ожидает прихода данных на порту 37. Как только датаграмма появляется (все данные в ней игнорируются), сервер отсылает датаграмму с 32-битовым числом, представляющим текущее значение времени.
# Примечание: 32-битовое число, которое отсылает сервер содержит число секунд, истекших с 00:00 (полночь) 1 января 1900 года до текущего момента времени. Порядок байт - сетевой. Принять во внимание, что на PC-совместимых компьютерах точка отсчета начинается с 00:00 1 января 1970 года.

import asyncore
import socket

class EchoHandler(asyncore.dispatcher_with_send):

    def handle_read(self):
        data = self.recv(8192)
        if data:
            self.send(data)

class EchoServer(asyncore.dispatcher):

    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is None:
            pass
        else:
            sock, addr = pair
            print 'Incoming connection from %s' % repr(addr)
            handler = EchoHandler(sock)

server = EchoServer('localhost', 8080)
asyncore.loop() 